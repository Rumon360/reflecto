generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?       @unique
  username           String?       @unique
  bio                String?
  isProfileCompleted Boolean       @default(false)
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  members            Member[]
  subscription       Subscription?
  discordId          String?
  apiKey             String?       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MEMBER
}

enum SubscriptionPlan {
  FREE
  MONTHLY
  YEARLY
}

model Subscription {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  userId               String           @unique @db.ObjectId
  plan                 SubscriptionPlan @default(FREE)
  stripeCustomerId     String?
  stripeSubscriptionId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  projectId String @db.ObjectId
  role      Role   @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  inviteToken InvitationToken?
  token       String           @unique @default(cuid()) @map("token")
  members     Member[]
  reviews     Review[]
  reviewForm  ReviewForm?
  url         String
  active      Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model InvitationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  projectId String   @unique @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  title       String?
  email       String?
  description String?
  image       String?
  rating      Int?
  active      Boolean @default(true)
  spam        Boolean @default(false)

  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewForm {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @default("Add a review")
  description String   @default("Please share your thoughts and feedback about our product or service.")
  email       Boolean  @default(false)
  name        Boolean  @default(true)
  rating      Boolean  @default(true)
  content     Boolean  @default(true)
  image       Boolean  @default(false)
  onSuccess   String   @default("Thank you for your review!")
  active      Boolean  @default(true)
  projectId   String   @unique @db.ObjectId
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
